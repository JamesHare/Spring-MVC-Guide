{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A Guide to SpringMVC This guide contains everything that I have learned about SpringMVC. I will continue to update as I learn more. Overview of Course Introduction Notes on what Spring MVC actually is, what it is used for, important milestones in Spring development and a look at the Spring MVC architecture.","title":"Home"},{"location":"#a-guide-to-springmvc","text":"This guide contains everything that I have learned about SpringMVC. I will continue to update as I learn more.","title":"A Guide to SpringMVC"},{"location":"#overview-of-course","text":"","title":"Overview of Course"},{"location":"#introduction","text":"Notes on what Spring MVC actually is, what it is used for, important milestones in Spring development and a look at the Spring MVC architecture.","title":"Introduction"},{"location":"about/","text":"About Author James Hare Email: harejamesm@gmail.com LinkedIn: https://www.linkedin.com/in/jameshareuk GitHub Portfolio: https://github.com/JamesHare","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#author","text":"James Hare Email: harejamesm@gmail.com LinkedIn: https://www.linkedin.com/in/jameshareuk GitHub Portfolio: https://github.com/JamesHare","title":"Author"},{"location":"intro/architecture/","text":"Spring MVC Architecture Under the hood, Spring MVC applications are just Java Servlets. Software Engineers write their custom applications on top of (using) Spring MVC. The benefits of having this architecture is that it sets a standard that other Developers can use and therefore provide better readability when many Developers are contributing to a code base. Request/ Response Lifecycle An outline of the request/ response lifecycle can be found below. With an understanding of this, you can understand the workflow of Spring MVC. There are three main components of Spring MVC. The Model , the View and the Controller (MVC). The User reaches an endpoint and an incoming request is passed to the Front Controller The Front Controller delegates the request to another Controller That other Controller handles the request and passes off to the backend components (perhaps a database) The backend component hands a Model (data represented as a POJO) back to the other Controller That other Controller delegates the rendering back to the Front Controller The Front Controller passes the Model back to a View template The View template renders the response. Control is returned to the Front Controller which returns the resonse to the browser and thereby returning data to the User. Again, each step is divided into three seperate parts: Model - The Controller and Backend (data represented as a POJO) View - The View templates and browser Controller - Front controller and other Controllers","title":"Architecture"},{"location":"intro/architecture/#spring-mvc-architecture","text":"Under the hood, Spring MVC applications are just Java Servlets. Software Engineers write their custom applications on top of (using) Spring MVC. The benefits of having this architecture is that it sets a standard that other Developers can use and therefore provide better readability when many Developers are contributing to a code base.","title":"Spring MVC Architecture"},{"location":"intro/architecture/#request-response-lifecycle","text":"An outline of the request/ response lifecycle can be found below. With an understanding of this, you can understand the workflow of Spring MVC. There are three main components of Spring MVC. The Model , the View and the Controller (MVC). The User reaches an endpoint and an incoming request is passed to the Front Controller The Front Controller delegates the request to another Controller That other Controller handles the request and passes off to the backend components (perhaps a database) The backend component hands a Model (data represented as a POJO) back to the other Controller That other Controller delegates the rendering back to the Front Controller The Front Controller passes the Model back to a View template The View template renders the response. Control is returned to the Front Controller which returns the resonse to the browser and thereby returning data to the User. Again, each step is divided into three seperate parts: Model - The Controller and Backend (data represented as a POJO) View - The View templates and browser Controller - Front controller and other Controllers","title":"Request/ Response Lifecycle"},{"location":"intro/milestones-in-spring/","text":"Milestones in Spring Here are some important milestones in the development of Spring and Spring MVC framework: 2002: Spring Framework is first released with a strong emphasis on interface driven developement. 2003: Spring v1.0 is released, incorporating things like SpringMVC and other tools such as Hibernate. 2006: Spring v1.2.6 wins the Jolt Productivity Award for Libraries, Frameworks, and Components. 2006: Spring 2.0 is released. 2007: Spring 2.5 is released with a heavy focus on annotation driven development. All configuration is done through annotation now. Prior to this everything was xml based. 2009: Spring 3.0 is released. 2013: Spring 4.0 is released. Notable improvements in Spring 4.0 included support for Java SE (Standard Edition) 8, Groovy 2, some aspects of Java EE 7, and WebSocket. 2017: Spring 5.0 is released. Spring 5 is announced to be built upon Reactive Streams compatible Reactor Core.","title":"Milestones in Spring"},{"location":"intro/milestones-in-spring/#milestones-in-spring","text":"Here are some important milestones in the development of Spring and Spring MVC framework: 2002: Spring Framework is first released with a strong emphasis on interface driven developement. 2003: Spring v1.0 is released, incorporating things like SpringMVC and other tools such as Hibernate. 2006: Spring v1.2.6 wins the Jolt Productivity Award for Libraries, Frameworks, and Components. 2006: Spring 2.0 is released. 2007: Spring 2.5 is released with a heavy focus on annotation driven development. All configuration is done through annotation now. Prior to this everything was xml based. 2009: Spring 3.0 is released. 2013: Spring 4.0 is released. Notable improvements in Spring 4.0 included support for Java SE (Standard Edition) 8, Groovy 2, some aspects of Java EE 7, and WebSocket. 2017: Spring 5.0 is released. Spring 5 is announced to be built upon Reactive Streams compatible Reactor Core.","title":"Milestones in Spring"},{"location":"intro/vocabulary/","text":"Vocabulary The following is a list of important terms that we will use to describe different components of Spring MVC. Familiarize yourself with them. DispatcherServlet The entry/ configuration point for the application. The Front Controller. Controller A command pattern object that handles the request and determines which View to route to. RequestMapping The URL and request type that a Java method is tied to. This handles HTML requests like GET, PUT, etc. ViewResolver This is used to locate JSP pages or whatever view we are using. Servlet-config Configuration file per DispatcherServlet. This is how Spring knows how to configure things and \"wire up\" our application. POJO Plain Old Java Object. Generally has a no arguments constructor and private member variables exposed through getters and setters. Bean A Spring configured POJO. It is an object that has been instantiated with Spring and is \"wired up\" to be used inside our custom Spring application.","title":"Vocabulary"},{"location":"intro/vocabulary/#vocabulary","text":"The following is a list of important terms that we will use to describe different components of Spring MVC. Familiarize yourself with them.","title":"Vocabulary"},{"location":"intro/vocabulary/#dispatcherservlet","text":"The entry/ configuration point for the application. The Front Controller.","title":"DispatcherServlet"},{"location":"intro/vocabulary/#controller","text":"A command pattern object that handles the request and determines which View to route to.","title":"Controller"},{"location":"intro/vocabulary/#requestmapping","text":"The URL and request type that a Java method is tied to. This handles HTML requests like GET, PUT, etc.","title":"RequestMapping"},{"location":"intro/vocabulary/#viewresolver","text":"This is used to locate JSP pages or whatever view we are using.","title":"ViewResolver"},{"location":"intro/vocabulary/#servlet-config","text":"Configuration file per DispatcherServlet. This is how Spring knows how to configure things and \"wire up\" our application.","title":"Servlet-config"},{"location":"intro/vocabulary/#pojo","text":"Plain Old Java Object. Generally has a no arguments constructor and private member variables exposed through getters and setters.","title":"POJO"},{"location":"intro/vocabulary/#bean","text":"A Spring configured POJO. It is an object that has been instantiated with Spring and is \"wired up\" to be used inside our custom Spring application.","title":"Bean"},{"location":"intro/what-is-spring-mvc/","text":"What is Spring MVC? In short, it is a web appliacation framework for developing applications using Enterprise Java (J2EE). Spring MVc is very versitile and can be used for many purposes. Here are some purposes and benefits of using Spring: RESTful services JSP based applications Headless applications POJO based Interface driven Uses annotation based configuration Easily unit tested Very lightweight and unobtrusive Based on a dispacher servlet/ front controller pattern Supports using Themes Seemless integration with other Spring concepts (Spring Services/ Beans) Most importantly, Spring promotes Convention over Configuration .","title":"What is Spring MVC?"},{"location":"intro/what-is-spring-mvc/#what-is-spring-mvc","text":"In short, it is a web appliacation framework for developing applications using Enterprise Java (J2EE). Spring MVc is very versitile and can be used for many purposes. Here are some purposes and benefits of using Spring: RESTful services JSP based applications Headless applications POJO based Interface driven Uses annotation based configuration Easily unit tested Very lightweight and unobtrusive Based on a dispacher servlet/ front controller pattern Supports using Themes Seemless integration with other Spring concepts (Spring Services/ Beans) Most importantly, Spring promotes Convention over Configuration .","title":"What is Spring MVC?"}]}